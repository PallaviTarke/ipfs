version: "3.8"

services:
  # ===== IPFS Nodes (to be filled in separately) =====
  # Add ipfs1, ipfs2, ipfs3, ipfs4 here
  # Add cluster0, cluster1, cluster2, cluster3 here

  # === Redis Setup ===
  redis-master:
    image: redis:7
    volumes:
      - redis-master-data:/data
    deploy:
      placement:
        constraints: [node.labels.role == ipfs-manager1]
    networks: [ipfs-net]

  redis-replica1:
    image: redis:7
    command: ["redis-server", "--replicaof", "redis-master", "6379"]
    volumes:
      - redis-replica1-data:/data
    deploy:
      placement:
        constraints: [node.labels.role == ipfs-manager2]
    networks: [ipfs-net]

  redis-replica2:
    image: redis:7
    command: ["redis-server", "--replicaof", "redis-master", "6379"]
    volumes:
      - redis-replica2-data:/data
    deploy:
      placement:
        constraints: [node.labels.role == ipfs-worker1]
    networks: [ipfs-net]

  redis-sentinel1:
    image: redis:7
    volumes:
      - ./redis-sentinel-entrypoint.sh:/usr/local/bin/redis-sentinel-entrypoint.sh
    entrypoint: ["bash", "/usr/local/bin/redis-sentinel-entrypoint.sh"]
    deploy:
      placement:
        constraints: [node.labels.role == ipfs-manager1]
    networks: [ipfs-net]

  redis-sentinel2:
    image: redis:7
    volumes:
      - ./redis-sentinel-entrypoint.sh:/usr/local/bin/redis-sentinel-entrypoint.sh
    entrypoint: ["bash", "/usr/local/bin/redis-sentinel-entrypoint.sh"]
    deploy:
      placement:
        constraints: [node.labels.role == ipfs-manager2]
    networks: [ipfs-net]

  redis-sentinel3:
    image: redis:7
    volumes:
      - ./redis-sentinel-entrypoint.sh:/usr/local/bin/redis-sentinel-entrypoint.sh
    entrypoint: ["bash", "/usr/local/bin/redis-sentinel-entrypoint.sh"]
    deploy:
      placement:
        constraints: [node.labels.role == ipfs-worker1]
    networks: [ipfs-net]

  # === MongoDB Replica Set ===
  mongo1:
    image: mongo:6
    volumes:
      - mongo1-data:/data/db
    command: mongod --replSet rs0 --bind_ip_all
    deploy:
      placement:
        constraints: [node.labels.role == ipfs-manager1]
    networks: [ipfs-net]

  mongo2:
    image: mongo:6
    volumes:
      - mongo2-data:/data/db
    command: mongod --replSet rs0 --bind_ip_all
    deploy:
      placement:
        constraints: [node.labels.role == ipfs-manager2]
    networks: [ipfs-net]

  mongo3:
    image: mongo:6
    volumes:
      - mongo3-data:/data/db
    command: mongod --replSet rs0 --bind_ip_all
    deploy:
      placement:
        constraints: [node.labels.role == ipfs-worker1]
    networks: [ipfs-net]

  # === MongoDB Exporter ===
  mongodb_exporter:
    image: percona/mongodb_exporter:0.40.0
    command:
      - "--mongodb.uri=mongodb://mongo1:27017,mongo2:27017,mongo3:27017/admin?replicaSet=rs0"
    deploy:
      placement:
        constraints: [node.labels.role == ipfs-manager1]
    networks: [ipfs-net]

  # === Node.js App ===
  nodejs:
    build:
      context: ./nodejs-app
    volumes:
      - nodejs-uploads:/app/uploads
    deploy:
      placement:
        constraints: [node.labels.role == ipfs-manager2]
    depends_on:
      - mongo1
      - redis-master
    networks: [ipfs-net]

  # === Frontend ===
  frontend:
    image: node:18
    working_dir: /app
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0"
    deploy:
      placement:
        constraints: [node.labels.role == ipfs-manager3]
    networks: [ipfs-net]
    depends_on:
      - nodejs

  # === NGINX Reverse Proxy ===
  nginx:
    image: nginx:stable
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    deploy:
      placement:
        constraints: [node.labels.role == ipfs-manager3]
    depends_on:
      - frontend
      - nodejs
    networks: [ipfs-net]

  # === Prometheus & Grafana ===
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    deploy:
      placement:
        constraints: [node.labels.role == ipfs-manager1]
    networks: [ipfs-net]

  grafana:
    image: grafana/grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    deploy:
      placement:
        constraints: [node.labels.role == ipfs-manager2]
    networks: [ipfs-net]

  # === Loki & Promtail ===
  loki:
    image: grafana/loki:2.9.4
    volumes:
      - ./loki/loki-config.yml:/etc/loki/local-config.yaml
      - ./loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    deploy:
      placement:
        constraints: [node.labels.role == ipfs-manager3]
    networks: [ipfs-net]

  promtail:
    image: grafana/promtail:2.9.4
    volumes:
      - ./promtail/promtail-config.yml:/etc/promtail/promtail.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: -config.file=/etc/promtail/promtail.yaml
    deploy:
      mode: global
    networks: [ipfs-net]

  # === Node Exporter & cAdvisor ===
  node_exporter:
    image: prom/node-exporter
    ports:
      - "9100:9100"
    deploy:
      mode: global
    networks: [ipfs-net]

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    deploy:
      mode: global
    networks: [ipfs-net]

networks:
  ipfs-net:
    driver: overlay

volumes:
  redis-master-data:
  redis-replica1-data:
  redis-replica2-data:
  mongo1-data:
  mongo2-data:
  mongo3-data:
  grafana-data:
  nodejs-uploads:
